[alias]

  # Group grep output
  g = grep --break --heading --line-number

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --abbrev-commit

  # View the current working tree status using the short format
  s = status -s

  r = rebase origin/master

  f = fetch origin master

  fr = !git f && git r

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  co = commit

  # Commit all changes
  ca = !git add -A && git commit -av

  # Stage all files and amend to the latest commit
  aa = !git add -A && git commit -av --amend --reuse-message=HEAD

  # Amend the currently staged files to the latest commit
  mm = commit --amend --reuse-message=HEAD

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout \"$@\" 2> /dev/null || git checkout -b \"$@\"; }; f"

  # `git branch`
  br = branch

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Group commits from merges, I think?
  what-changed = log --name-status origin/master -m --first-parent --merges

	# Get first commit that's not mine
	not-mine = "!f() { git log --pretty='%h%x09%an' $1 | rg -m 1 -v -i 'antonio.*ochoa' | cut -c 1-10; }; f"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

  # Make `git rebase` safer on OS X
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Use commit graph
  commitGraph = true

  # ¯\_(ツ)_/¯
  splitIndex = true
  untrackedCache = true

[index]

  # ¯\_(ツ)_/¯
  version = 4

[fetch]

  # Update commit graph on fetch
  writeCommitGraph = true

[gc]

  # Rewrite the commit graph on gc
  writeCommitGraph = true

  auto = 0

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames
  renames = copies

[help]

  # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

# URL shorthands

[url "git@github.com:"]

  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

  insteadOf = "github:"

[url "git@gist.github.com:"]

  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

  insteadOf = "gist:"

[grep]

  lineNumber = true

[user]

  name = Antonio de Jesus Ochoa Solano
  email = antoniodejesusochoasolano@gmail.com
